{"ast":null,"code":"var _jsxFileName = \"/home/nathan/Desktop/Autogen-react/AutoGen_API/react_mini_app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [chatStatus, setChatStatus] = useState('ended');\n  const messagesEndRef = useRef(null);\n\n  // Initial chat request structure\n  const initialChatRequest = {\n    \"message\": \"Write a quick manuscript\",\n    \"agents_info\": [{\n      \"name\": \"Personal_Assistant\",\n      \"type\": \"AssistantAgent\",\n      \"llm\": {\n        \"model\": \"gpt-4o\"\n      },\n      \"system_message\": \"You are a personal assistant who can answer questions.\",\n      \"description\": \"This is a personal assistant who can answer questions.\"\n    }],\n    \"task_info\": {\n      \"id\": 0,\n      \"name\": \"Personal Assistant\",\n      \"description\": \"This is a powerful personal assistant.\",\n      \"maxMessages\": 5,\n      \"speakSelMode\": \"auto\"\n    }\n  };\n\n  // Function to send message/start chat\n  const handleSend = async () => {\n    let apiEndpoint, requestBody;\n    if (chatStatus === 'Chat ongoing' || chatStatus === 'inputting') {\n      // Send message request\n      apiEndpoint = 'http://localhost:5008/api/send_message';\n      requestBody = {\n        message: userInput\n      };\n    } else {\n      // Start chat request\n      apiEndpoint = 'http://localhost:5008/api/start_chat';\n      requestBody = {\n        ...initialChatRequest,\n        message: userInput\n      };\n    }\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to send request');\n      }\n      setUserInput(''); // Clear input field\n    } catch (error) {\n      console.error('Error sending request:', error);\n    }\n  };\n\n  // Function to fetch messages from the backend\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch('http://localhost:5008/api/get_message');\n      if (!response.ok) {\n        throw new Error('Failed to fetch messages');\n      }\n      const data = await response.json();\n      if (data.message) {\n        debugger;\n        setMessages([...messages, data.message]);\n      }\n      setChatStatus(data.chat_status);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Use useEffect to poll for new messages\n  useEffect(() => {\n    const intervalId = setInterval(fetchMessages, 1000);\n    return () => clearInterval(intervalId);\n  }, [messages]);\n\n  // Scroll to bottom when new messages are added\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  console.log(\"messages\", msg.messages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.user === 'Interaction_Agent' ? 'user' : 'agent'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.user === \"Interaction_Agent\" ? \"\" : msg.user, \" \", msg.user === \"Interaction_Agent\" ? \"\" : \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), \" \", msg.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-status\",\n        children: [\"Chat Status: \", chatStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1cUC+cMq2fAkQO0a8IJ7/aNWzm8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","messages","setMessages","chatStatus","setChatStatus","messagesEndRef","initialChatRequest","handleSend","apiEndpoint","requestBody","message","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","fetchMessages","data","json","chat_status","intervalId","setInterval","clearInterval","_messagesEndRef$curre","current","scrollIntoView","behavior","log","msg","className","children","map","index","user","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/nathan/Desktop/Autogen-react/AutoGen_API/react_mini_app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css'\n\nfunction App() {\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [chatStatus, setChatStatus] = useState('ended'); \n\n  const messagesEndRef = useRef(null);\n\n  // Initial chat request structure\n  const initialChatRequest = {\n    \"message\": \"Write a quick manuscript\", \n    \"agents_info\": [\n        {\n            \"name\": \"Personal_Assistant\",\n            \"type\": \"AssistantAgent\",\n            \"llm\": {\n                \"model\": \"gpt-4o\"\n            },\n            \"system_message\": \"You are a personal assistant who can answer questions.\",\n            \"description\": \"This is a personal assistant who can answer questions.\"\n        }\n    ],\n    \"task_info\": {\n        \"id\": 0,\n        \"name\": \"Personal Assistant\",\n        \"description\": \"This is a powerful personal assistant.\",\n        \"maxMessages\": 5,\n        \"speakSelMode\": \"auto\"\n    }\n  };\n\n  // Function to send message/start chat\n  const handleSend = async () => {\n    let apiEndpoint, requestBody;\n\n    if (chatStatus === 'Chat ongoing' || chatStatus === 'inputting') {\n      // Send message request\n      apiEndpoint = 'http://localhost:5008/api/send_message';\n      requestBody = { message: userInput };\n    } else {\n      // Start chat request\n      apiEndpoint = 'http://localhost:5008/api/start_chat';\n      requestBody = { ...initialChatRequest, message: userInput }; \n    }\n\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to send request');\n      }\n\n      setUserInput(''); // Clear input field\n    } catch (error) {\n      console.error('Error sending request:', error);\n    }\n  };\n\n  // Function to fetch messages from the backend\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch('http://localhost:5008/api/get_message');\n      if (!response.ok) {\n        throw new Error('Failed to fetch messages');\n      }\n\n      const data = await response.json();\n      if (data.message) {debugger;\n        setMessages([...messages, data.message]);\n        \n      }\n      setChatStatus(data.chat_status); \n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Use useEffect to poll for new messages\n  useEffect(() => {\n    const intervalId = setInterval(fetchMessages, 1000); \n    return () => clearInterval(intervalId);\n  }, [messages]); \n\n  // Scroll to bottom when new messages are added\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n  console.log(\"messages\",msg.messages);\n  return (\n    <div className=\"App\">\n\n      <div className=\"chat-window\">\n        <div className=\"messages\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.user === 'Interaction_Agent' ? 'user' : 'agent'}`}>\n              <strong>{msg.user === \"Interaction_Agent\" ? \"\" : msg.user} {msg.user === \"Interaction_Agent\" ? \"\" : \":\"}</strong> {msg.message}\n            </div >\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n        <div className=\"input-area\">\n          <input\n            type=\"text\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            placeholder=\"Type your message...\"\n          />\n          <button onClick={handleSend}>Send</button> \n        </div>\n        <p className=\"chat-status\">Chat Status: {chatStatus}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}