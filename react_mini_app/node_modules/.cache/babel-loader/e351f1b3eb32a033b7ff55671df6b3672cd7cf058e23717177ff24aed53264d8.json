{"ast":null,"code":"var _jsxFileName = \"/home/nathan/Desktop/Autogen-react/AutoGen_API/react_mini_app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [chatStatus, setChatStatus] = useState('ended');\n  const messagesEndRef = useRef(null);\n\n  // Function to send message/start chat\n  const handleSend = async () => {\n    const apiEndpoint = chatStatus === 'ended' ? 'http://localhost:5008/api/start_chat' : 'http://localhost:5008/api/send_message';\n    const requestBody = {\n      message: userInput\n    };\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to send request');\n      }\n      setUserInput(''); // Clear input field after sending\n    } catch (error) {\n      console.error('Error sending request:', error);\n    }\n  };\n\n  // Function to fetch messages from the backend\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch('http://localhost:5008/api/get_message');\n      if (!response.ok) {\n        throw new Error('Failed to fetch messages');\n      }\n      const data = await response.json();\n      if (data.message) {\n        setMessages([...messages, data.message]);\n      }\n      setChatStatus(data.chat_status);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Use useEffect to poll for new messages\n  useEffect(() => {\n    const intervalId = setInterval(fetchMessages, 1000);\n    return () => clearInterval(intervalId);\n  }, [messages]);\n\n  // Scroll to bottom when new messages are added\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.user === 'User_Proxy' ? 'user' : 'agent'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.user, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), \" \", msg.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-status\",\n        children: [\"Chat Status: \", chatStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1cUC+cMq2fAkQO0a8IJ7/aNWzm8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","messages","setMessages","chatStatus","setChatStatus","messagesEndRef","handleSend","apiEndpoint","requestBody","message","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","fetchMessages","data","json","chat_status","intervalId","setInterval","clearInterval","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","map","msg","index","user","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/nathan/Desktop/Autogen-react/AutoGen_API/react_mini_app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [chatStatus, setChatStatus] = useState('ended');\n  const messagesEndRef = useRef(null);\n\n  // Function to send message/start chat\n  const handleSend = async () => {\n    const apiEndpoint = chatStatus === 'ended' ? 'http://localhost:5008/api/start_chat' : 'http://localhost:5008/api/send_message';\n    const requestBody = { message: userInput };\n\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to send request');\n      }\n\n      setUserInput(''); // Clear input field after sending\n    } catch (error) {\n      console.error('Error sending request:', error);\n    }\n  };\n\n  // Function to fetch messages from the backend\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch('http://localhost:5008/api/get_message');\n      if (!response.ok) {\n        throw new Error('Failed to fetch messages');\n      }\n\n      const data = await response.json();\n      if (data.message) {\n        setMessages([...messages, data.message]);\n      }\n      setChatStatus(data.chat_status);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Use useEffect to poll for new messages\n  useEffect(() => {\n    const intervalId = setInterval(fetchMessages, 1000);\n    return () => clearInterval(intervalId);\n  }, [messages]);\n\n  // Scroll to bottom when new messages are added\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"chat-window\">\n        <div className=\"messages\">\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.user === 'User_Proxy' ? 'user' : 'agent'}`}>\n              <strong>{msg.user}:</strong> {msg.message}\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n        <div className=\"input-area\">\n          <input\n            type=\"text\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            placeholder=\"Type your message...\"\n          />\n          <button onClick={handleSend}>Send</button>\n        </div>\n        <p className=\"chat-status\">Chat Status: {chatStatus}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}