{"ast":null,"code":"var _jsxFileName = \"/home/nathan/Desktop/Autogen-react/AutoGen_API/react_mini_app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [chatStatus, setChatStatus] = useState('ended');\n  const messagesEndRef = useRef(null);\n  const initialChatRequest = {\n    \"message\": \"Write a quick manuscript\",\n    \"agents_info\": [{\n      \"name\": \"Personal_Assistant\",\n      \"type\": \"AssistantAgent\",\n      \"llm\": {\n        \"model\": \"gpt-4o\"\n      },\n      \"system_message\": \"You are a personal assistant who can answer questions.\",\n      \"description\": \"This is a personal assistant who can answer questions.\"\n    }],\n    \"task_info\": {\n      \"id\": 0,\n      \"name\": \"Personal Assistant\",\n      \"description\": \"This is a powerful personal assistant.\",\n      \"maxMessages\": 5,\n      \"speakSelMode\": \"auto\"\n    }\n  };\n  const handleSend = async text => {\n    const apiEndpoint = chatStatus === 'ended' ? 'http://localhost:5008/api/start_chat' : 'http://localhost:5008/api/send_message';\n    const requestBody = chatStatus === 'ended' ? {\n      ...initialChatRequest,\n      message: text\n    } : {\n      message: text\n    };\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to send request');\n      }\n      const data = await response.json(); // Assuming the server sends back some data\n      setMessages([...messages, {\n        user: 'User',\n        message: text\n      }, {\n        user: 'Agent',\n        message: data.reply\n      }]); // Update messages to include both user and agent reply\n      setChatStatus('ongoing'); // Update chat status as ongoing\n      setUserInput(''); // Clear input field\n    } catch (error) {\n      console.error('Error sending request:', error);\n    }\n  };\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch('http://localhost:5008/api/get_message');\n      if (!response.ok) {\n        throw new Error('Failed to fetch messages');\n      }\n      const data = await response.json();\n      if (data.message) {\n        setMessages([...messages, data.message]);\n      }\n      setChatStatus(data.chat_status);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  useEffect(() => {\n    const intervalId = setInterval(fetchMessages, 1000);\n    return () => clearInterval(intervalId);\n  }, [messages]);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const questions = [\"Can you describe the symptoms you've been experiencing?\", \"How long have you been feeling unwell?\", \"Can you describe any symptoms you've been experiencing related to your diabetes?\", \"Have you noticed any chest pain, shortness of breath, or palpitations recently?\"];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message system\",\n          children: [\"Hello! Think of me as your patient simulation bot, here to help you practice and refine your medical skills. Please go ahead and ask your questions as if I were your patient. Here are a few questions to get you started:\", questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-link\",\n            onClick: () => handleSend(question),\n            children: [\"- \", question]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.user === 'User_Proxy' ? 'user' : 'agent'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.user, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), \" \", msg.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSend(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-status\",\n        children: [\"Chat Status: \", chatStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1cUC+cMq2fAkQO0a8IJ7/aNWzm8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","messages","setMessages","chatStatus","setChatStatus","messagesEndRef","initialChatRequest","handleSend","text","apiEndpoint","requestBody","message","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","user","reply","error","console","fetchMessages","chat_status","intervalId","setInterval","clearInterval","_messagesEndRef$curre","current","scrollIntoView","behavior","questions","className","children","map","question","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","msg","ref","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/home/nathan/Desktop/Autogen-react/AutoGen_API/react_mini_app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [chatStatus, setChatStatus] = useState('ended'); \n  const messagesEndRef = useRef(null);\n\n  const initialChatRequest = {\n    \"message\": \"Write a quick manuscript\", \n    \"agents_info\": [\n        {\n            \"name\": \"Personal_Assistant\",\n            \"type\": \"AssistantAgent\",\n            \"llm\": {\n                \"model\": \"gpt-4o\"\n            },\n            \"system_message\": \"You are a personal assistant who can answer questions.\",\n            \"description\": \"This is a personal assistant who can answer questions.\"\n        }\n    ],\n    \"task_info\": {\n        \"id\": 0,\n        \"name\": \"Personal Assistant\",\n        \"description\": \"This is a powerful personal assistant.\",\n        \"maxMessages\": 5,\n        \"speakSelMode\": \"auto\"\n    }\n  };\n\n  const handleSend = async (text) => {\n    const apiEndpoint = chatStatus === 'ended' ? 'http://localhost:5008/api/start_chat' : 'http://localhost:5008/api/send_message';\n    const requestBody = chatStatus === 'ended' \n      ? { ...initialChatRequest, message: text } \n      : { message: text };\n  \n    try {\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to send request');\n      }\n  \n      const data = await response.json(); // Assuming the server sends back some data\n      setMessages([...messages, {user: 'User', message: text}, {user: 'Agent', message: data.reply}]); // Update messages to include both user and agent reply\n      setChatStatus('ongoing'); // Update chat status as ongoing\n      setUserInput(''); // Clear input field\n    } catch (error) {\n      console.error('Error sending request:', error);\n    }\n  };\n  \n\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch('http://localhost:5008/api/get_message');\n      if (!response.ok) {\n        throw new Error('Failed to fetch messages');\n      }\n\n      const data = await response.json();\n      if (data.message) {\n        setMessages([...messages, data.message]);\n      }\n      setChatStatus(data.chat_status); \n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  useEffect(() => {\n    const intervalId = setInterval(fetchMessages, 1000); \n    return () => clearInterval(intervalId);\n  }, [messages]); \n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const questions = [\n    \"Can you describe the symptoms you've been experiencing?\",\n    \"How long have you been feeling unwell?\",\n    \"Can you describe any symptoms you've been experiencing related to your diabetes?\",\n    \"Have you noticed any chest pain, shortness of breath, or palpitations recently?\"\n  ];\n\n  return (\n    <div className=\"App\">\n      <div className=\"chat-window\">\n        <div className=\"messages\">\n          <div className=\"message system\">\n            Hello! Think of me as your patient simulation bot, here to help you practice and refine your medical skills. Please go ahead and ask your questions as if I were your patient. Here are a few questions to get you started:\n            {questions.map((question, index) => (\n              <div key={index} className=\"question-link\" onClick={() => handleSend(question)}>\n                - {question}\n              </div>\n            ))}\n          </div>\n          {messages.map((msg, index) => (\n            <div key={index} className={`message ${msg.user === 'User_Proxy' ? 'user' : 'agent'}`}>\n              <strong>{msg.user}:</strong> {msg.message}\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n        <div className=\"input-area\">\n          <input\n            type=\"text\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            placeholder=\"Type your message...\"\n          />\n          <button onClick={() => handleSend()}>Send</button>\n        </div>\n        <p className=\"chat-status\">Chat Status: {chatStatus}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}