{"ast":null,"code":"var _jsxFileName = \"/home/bitcot/Desktop/Reactjs/nathan/Autogen/react_mini_app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [chatStatus, setChatStatus] = useState('ended');\n  const messagesEndRef = useRef(null);\n\n  // // Initial chat request structure\n  // const initialChatRequest = {\n  //   \"message\": \"Write a quick manuscript\", \n  //   \"agents_info\": [\n  //       {\n  //           \"name\": \"Personal_Assistant\",\n  //           \"type\": \"AssistantAgent\",\n  //           \"llm\": {\n  //               \"model\": \"gpt-4o\"\n  //           },\n  //           \"system_message\": \"You are a personal assistant who can answer questions.\",\n  //           \"description\": \"This is a personal assistant who can answer questions.\"\n  //       }\n  //   ],\n  //   \"task_info\": {\n  //       \"id\": 0,\n  //       \"name\": \"Personal Assistant\",\n  //       \"description\": \"This is a powerful personal assistant.\",\n  //       \"maxMessages\": 5,\n  //       \"speakSelMode\": \"auto\"\n  //   }\n  // };\n\n  // Function to send message/start chat\n  const handleSend = async () => {\n    let apiEndpoint, requestBody;\n    if (chatStatus === 'Chat ongoing' || chatStatus === 'inputting') {\n      // Send message request\n      apiEndpoint = 'http://localhost:5008/api/send_message';\n      requestBody = {\n        message: userInput\n      };\n    } else {\n      // Start chat request\n      apiEndpoint = 'http://localhost:5008/api/start_chat';\n      requestBody = {\n        message: userInput\n      };\n    }\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to send request');\n      }\n      setUserInput(''); // Clear input field\n    } catch (error) {\n      console.error('Error sending request:', error);\n    }\n  };\n\n  // Function to fetch messages from the backend\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch('http://localhost:5008/api/get_message');\n      if (!response.ok) {\n        throw new Error('Failed to fetch messages');\n      }\n      const data = await response.json();\n      if (data.message) {\n        setMessages([...messages, data.message]);\n      }\n      setChatStatus(data.chat_status);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Use useEffect to poll for new messages\n  useEffect(() => {\n    const intervalId = setInterval(fetchMessages, 1000);\n    return () => clearInterval(intervalId);\n  }, [messages]);\n\n  // Scroll to bottom when new messages are added\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-static-contents\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Hello! ,Think of me as your patient simulation bot, here to help you practice and refine your medical skills. Please go ahead and ask your questions as if I were your patient. Here are a few questions to get you started:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.user === 'Interaction_Agent' ? 'user' : 'agent'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [msg.user === \"Interaction_Agent\" ? \"\" : msg.user, \" \", msg.user === \"Interaction_Agent\" ? \"\" : \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 12\n          }, this), \" \", msg.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 12\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chat-status\",\n        children: [\"Chat Status: \", chatStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1cUC+cMq2fAkQO0a8IJ7/aNWzm8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","messages","setMessages","chatStatus","setChatStatus","messagesEndRef","handleSend","apiEndpoint","requestBody","message","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","fetchMessages","data","json","chat_status","intervalId","setInterval","clearInterval","_messagesEndRef$curre","current","scrollIntoView","behavior","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","user","ref","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/bitcot/Desktop/Reactjs/nathan/Autogen/react_mini_app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css'\n\nfunction App() {\n  const [userInput, setUserInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [chatStatus, setChatStatus] = useState('ended'); \n\n  const messagesEndRef = useRef(null);\n\n  // // Initial chat request structure\n  // const initialChatRequest = {\n  //   \"message\": \"Write a quick manuscript\", \n  //   \"agents_info\": [\n  //       {\n  //           \"name\": \"Personal_Assistant\",\n  //           \"type\": \"AssistantAgent\",\n  //           \"llm\": {\n  //               \"model\": \"gpt-4o\"\n  //           },\n  //           \"system_message\": \"You are a personal assistant who can answer questions.\",\n  //           \"description\": \"This is a personal assistant who can answer questions.\"\n  //       }\n  //   ],\n  //   \"task_info\": {\n  //       \"id\": 0,\n  //       \"name\": \"Personal Assistant\",\n  //       \"description\": \"This is a powerful personal assistant.\",\n  //       \"maxMessages\": 5,\n  //       \"speakSelMode\": \"auto\"\n  //   }\n  // };\n\n  // Function to send message/start chat\n  const handleSend = async () => {\n    let apiEndpoint, requestBody;\n\n    if (chatStatus === 'Chat ongoing' || chatStatus === 'inputting') {\n      // Send message request\n      apiEndpoint = 'http://localhost:5008/api/send_message';\n      requestBody = { message: userInput };\n    } else {\n      // Start chat request\n      apiEndpoint = 'http://localhost:5008/api/start_chat';\n      requestBody = {message: userInput }; \n    }\n\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(requestBody),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to send request');\n      }\n\n      setUserInput(''); // Clear input field\n    } catch (error) {\n      console.error('Error sending request:', error);\n    }\n  };\n\n  // Function to fetch messages from the backend\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch('http://localhost:5008/api/get_message');\n      if (!response.ok) {\n        throw new Error('Failed to fetch messages');\n      }\n\n      const data = await response.json();\n      if (data.message) {\n        setMessages([...messages, data.message]);\n        \n      }\n      setChatStatus(data.chat_status); \n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n\n  // Use useEffect to poll for new messages\n  useEffect(() => {\n    const intervalId = setInterval(fetchMessages, 1000); \n    return () => clearInterval(intervalId);\n  }, [messages]); \n\n  // Scroll to bottom when new messages are added\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"chat-window\">\n      <div className='chat-static-contents'>\n        <p>\n        Hello! ,Think of me as your patient simulation bot, here to help you practice and refine your medical skills. Please go ahead and ask your questions as if I were your patient. Here are a few questions to get you started:\n        </p>\n      </div>\n        <div className=\"messages\">\n          {messages.map((msg, index) => (\n           <div key={index} className={`message ${msg.user === 'Interaction_Agent' ? 'user' : 'agent'}`}>\n           <strong>{msg.user === \"Interaction_Agent\" ? \"\" : msg.user} {msg.user === \"Interaction_Agent\" ? \"\" : \":\"}</strong> {msg.message}\n         </div >\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n        <div className=\"input-area\">\n          <input\n            type=\"text\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            placeholder=\"Type your message...\"\n          />\n          <button onClick={handleSend}>Send</button> \n        </div>\n        <p className=\"chat-status\">Chat Status: {chatStatus}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}